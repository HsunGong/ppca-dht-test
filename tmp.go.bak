package main

import (
	"fmt"
	"sync"
	"time"
)

var wg sync.WaitGroup

func main() {
	done := make(chan bool)

	// wg.Add(1)
	// go rou()

	// wg.Add(1)
	// go rou2()

	// c := make(chan os.Signal, 1)
	// signal.Notify(c, os.Interrupt, os.Kill)

	// s := <-c
	// fmt.Println("Got signal:", s)

	go run(done)

	time.Sleep(time.Second * 2)
	fmt.Println("R1")
	done <- true
	context.can()

	time.Sleep(time.Second * 1)
	// fmt.Println("R2")
	// wg.Done()
	// time.Sleep(time.Second * 1)
	// fmt.Println("R3")

}

func run(done chan bool) {
	go rou()
}

func tick(done chan bool) {
}

func rou() {
	defer func() {
		// wg.Done()
		fmt.Println("still can get defer")
	}()

	t := time.Now().Second()
	x := 1
	for true {
		if time.Now().Second()-t > 10 {
			panic("panic")
		}
		time.Sleep(time.Millisecond * 300)
		fmt.Println(x)
		x++
	}
}

func rou2() {
	defer func() {
		// wg.Done()
		fmt.Println("2:still can get defer")
	}()

	t := time.Now().Second()
	x := 1
	for true {
		if time.Now().Second()-t > 5 {
			panic("panic2")
		}
		time.Sleep(time.Millisecond * 300)
		fmt.Println("-", x)
		x++
	}
}
